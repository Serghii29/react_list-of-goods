{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","state","isReversed","sortType","NONE","reverse","setState","sorrBy","reset","copyGoodsList","goods","visibleGoods","ALPHABET","sort","a","b","localeCompare","LENGTH","length","console","log","getReorderedGoods","this","visibleReset","className","type","classNames","onClick","map","good","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAmBKA,E,+FAbQC,EAA4B,CACvC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAiDE,IAAME,EAAb,4MACEC,MAAQ,CACNC,YAAY,EACZC,SAAUL,EAASM,MAHvB,EAMEC,QAAU,WACR,EAAKC,UAAS,SAACL,GAAD,MAAY,CACxBC,YAAaD,EAAMC,gBARzB,EAYEK,OAAS,SAACJ,GACR,EAAKG,UAAS,iBAAO,CACnBH,gBAdN,EAkBEK,MAAQ,WACN,EAAKF,UAAS,iBAAO,CACnBJ,YAAY,EACZC,SAAUL,EAASM,UArBzB,4CAyBE,WAAU,IAAD,OACDK,EA/DH,SACLC,EADK,GAGJ,IADCP,EACF,EADEA,SAAUD,EACZ,EADYA,WAGNS,EAAY,YAAOD,GAEzB,OAAQP,GACN,KAAKL,EAASc,SACZD,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC5C,MAEF,KAAKjB,EAASmB,OACZN,EAAaE,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAe7C,OARIhB,GACFS,EAAaN,UAKfc,QAAQC,IAAIjB,EAAUD,GAEfS,EAmCiBU,CAAkBtB,EAAiBuB,KAAKrB,OAExDsB,GAAyC,IAA1BD,KAAKrB,MAAMC,YAC3BoB,KAAKrB,MAAME,WAAaL,EAASM,KAEtC,EAAiCkB,KAAKrB,MAA9BC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,SAEpB,OACE,sBAAKqB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,SAAU,UAAW,CACzC,WAAYvB,IAAaL,EAASc,WAEpCe,QAAS,kBACP,EAAKpB,OAAOT,EAASc,WANzB,iCAYA,wBACEa,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,WAAYvB,IAAaL,EAASmB,SAEpCU,QAAS,kBACP,EAAKpB,OAAOT,EAASmB,SANzB,4BAYA,wBACEQ,KAAK,SACLD,UAAWE,IAAW,SAAU,aAAc,CAC5C,YAAaxB,IAEfyB,QAASL,KAAKjB,QALhB,sBAUEkB,GACA,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAASL,KAAKd,MAHhB,sBAUJ,6BACE,6BACGC,EAAcmB,KAAI,SAAAC,GAAI,OACrB,oBACE,UAAQ,OADV,SAIGA,GAFIA,iBAtFrB,GAAyBC,aCjEzBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f511f4ee.chunk.js","sourcesContent":["import { Component } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\n\nexport const goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort((a, b) => a.localeCompare(b));\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods.sort((a, b) => a.length - b.length);\n      break;\n\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  // Sort and reverse goods if needed\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\n// DON'T save goods to the state\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends Component<{}, State> {\n  state = {\n    isReversed: false,\n    sortType: SortType.NONE,\n  };\n\n  reverse = () => {\n    this.setState((state) => ({\n      isReversed: !state.isReversed,\n    }));\n  };\n\n  sorrBy = (sortType: SortType) => {\n    this.setState(() => ({\n      sortType,\n    }));\n  };\n\n  reset = () => {\n    this.setState(() => ({\n      isReversed: false,\n      sortType: SortType.NONE,\n    }));\n  };\n\n  render() {\n    const copyGoodsList = getReorderedGoods(goodsFromServer, this.state);\n\n    const visibleReset = this.state.isReversed === false\n      && this.state.sortType === SortType.NONE;\n\n    const { isReversed, sortType } = this.state;\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={classNames('button', 'is-info', {\n              'is-light': sortType !== SortType.ALPHABET,\n            })}\n            onClick={() => (\n              this.sorrBy(SortType.ALPHABET)\n            )}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames('button', 'is-success', {\n              'is-light': sortType !== SortType.LENGTH,\n            })}\n            onClick={() => (\n              this.sorrBy(SortType.LENGTH)\n            )}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames('button', 'is-warning', {\n              'is-light': !isReversed,\n            })}\n            onClick={this.reverse}\n          >\n            Reverse\n          </button>\n\n          {!visibleReset && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={this.reset}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n\n        <ul>\n          <ul>\n            {copyGoodsList.map(good => (\n              <li\n                data-cy=\"Good\"\n                key={good}\n              >\n                {good}\n              </li>\n            ))}\n          </ul>\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}